在 Git 中，提交记录的时间戳是由提交时系统的本地时间决定的，而不是由提交顺序决定的。如果提交记录中先提交的记录的时间戳比后提交的时间戳显示的时间更晚，这可能是因为系统的本地时间被修改过。

有时候，可能会出现时间戳不正确的情况，比如本地系统时间不准确或者被修改。这种情况下，提交的时间戳可能不符合时间的逻辑顺序。但是 Git 并不会因为时间戳的顺序问题而产生影响，它只是按照时间戳的先后顺序显示提交记录。

通常情况下，我们希望提交记录的时间戳能够反映实际提交的顺序和时间，所以确保本地系统时间是准确的是很重要的。如果你发现时间戳出现了问题，你可以修正本地系统的时间，然后重新提交。如果有特殊原因需要更正历史提交的时间戳，可以使用 Git 的 --amend 选项，但这通常不推荐，特别是如果这些提交已经被推送到共享的远程仓库。


具体来说，当要resume一个不参与调度器调度的协程（m_runInScheduler为false）时，只需直接切换到该协程的上下文，即线程主协程的上下文（main_ctx）。这是因为这些协程不需要和调度协程切换，可以直接和线程主协程切换，因为它们不受调度器的管理。

类似地，在这些不参与调度器调度的协程中执行yield操作时，也应该恢复线程主协程的上下文（main_ctx），表示从子协程切换回线程主协程。

总结一下，在单线程环境下，协程的切换可以分为两种情况：

    对于参与调度器调度的协程（m_runInScheduler为true），切换时要考虑三个上下文：当前正在执行的协程的上下文、线程主协程的上下文、以及调度协程的上下文。
    对于不参与调度器调度的协程（m_runInScheduler为false），切换时只需考虑两个上下文：当前正在执行的协程的上下文和线程主协程的上下文